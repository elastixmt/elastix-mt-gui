#!KAMAILIO
 
#!define WITH_ODBC
#!define WITH_AUTH
#!define WITH_IPAUTH
#!define WITH_USRLOCDB
#!define WITH_ASTERISK
#!define WITH_PRESENCE
#!define WITH_NAT
#!define WITH_MULTIDOMAIN
#!define WITH_XHTTP
#!define WITH_WEBSOCKET
#!define WITH_TLS
#!define WITH_XCAPSRV
 
#
# Kamailio (OpenSER) SIP Server v4.1 - default configuration script
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: <sr-users@lists.sip-router.org>
#
# Refer to the Core CookBook at http://www.kamailio.org/wiki/
# for an explanation of possible statements, functions and parameters.
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode: 
#     - define WITH_DEBUG
#
# *** To enable mysql: 
#     - define WITH_MYSQL
#
# *** To enable authentication execute:
#     - enable mysql
#     - define WITH_AUTH
#     - add users using 'kamctl'
#
# *** To enable IP authentication execute:
#     - enable mysql
#     - enable authentication
#     - define WITH_IPAUTH
#     - add IP addresses with group id '1' to 'address' table
#
# *** To enable persistent user location execute:
#     - enable mysql
#     - define WITH_USRLOCDB
#
# *** To enable presence server execute:
#     - enable mysql
#     - define WITH_PRESENCE
#
# *** To enable nat traversal execute:
#     - define WITH_NAT
#     - install RTPProxy: http://www.rtpproxy.org
#     - start RTPProxy:
#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722
#
# *** To enable PSTN gateway routing execute:
#     - define WITH_PSTN
#     - set the value of pstn.gw_ip
#     - check route[PSTN] for regexp routing condition
#
# *** To enable database aliases lookup execute:
#     - enable mysql
#     - define WITH_ALIASDB
#
# *** To enable speed dial lookup execute:
#     - enable mysql
#     - define WITH_SPEEDDIAL
#
# *** To enable multi-domain support execute:
#     - enable mysql
#     - define WITH_MULTIDOMAIN
#
# *** To enable TLS support execute:
#     - adjust CFGDIR/tls.cfg as needed
#     - define WITH_TLS
#
# *** To enable XMLRPC support execute:
#     - define WITH_XMLRPC
#     - adjust route[XMLRPC] for access policy
#
# *** To enable anti-flood detection execute:
#     - adjust pike and htable=>ipban settings as needed (default is
#       block if more than 16 requests in 2 seconds and ban for 300 seconds)
#     - define WITH_ANTIFLOOD
#
# *** To block 3XX redirect replies execute:
#     - define WITH_BLOCK3XX
#
# *** To enable VoiceMail routing execute:
#     - define WITH_VOICEMAIL
#     - set the value of voicemail.srv_ip
#     - adjust the value of voicemail.srv_port
#
# *** To enhance accounting execute:
#     - enable mysql
#     - define WITH_ACCDB
#     - add following columns to database
#!ifdef ACCDB_COMMENT
  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
#!endif

####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

####### Defined Values #########

# *** Value defines - IDs used later in config
#!ifdef WITH_ODBC
#!ifndef DBURL
#!define DBURL "unixodbc:///kamailio-connector"
#!endif
#!ifdef WITH_ASTERISK
#!define DBASTURL "unixodbc:///elxpbx-connector"
#!endif
#!endif
#!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
#!ifndef DBURL
#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!endif
#!endif
#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

#log_facility=LOG_LOCAL0
log_facility=LOG_LOCAL6

fork=yes
children=4

/* uncomment the next line to disable TCP (default on) */
#disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
#auto_aliases=no

/* add local domain aliases */
#alias="sip.mydomain.com"

/* uncomment and configure the following line if you want Kamailio to 
   bind on a specific interface/port/proto (default bind on all available) */
#listen=udp:10.0.0.10:5060

/* port to listen to
 * - can be specified more than once if needed to listen on many ports */
port=5060

# force_rport=yes

#!ifdef WITH_TLS
enable_tls=yes
#!endif

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605

#!ifdef WITH_XHTTP
tcp_accept_no_cl=yes
#!endif

tcp_rd_buf_size=32768

pv_buffer_size=2048

####### Custom Parameters #########

# These parameters can be modified runtime via RPC interface
# - see the documentation of 'cfg_rpc' module.
#
# Format: group.id = value 'desc' description
# Access: $sel(cfg_get.group.id) or @cfg_get.group.id
#

#!ifdef WITH_PSTN
# PSTN GW Routing
#
# - pstn.gw_ip: valid IP or hostname as string value, example:
# pstn.gw_ip = "10.0.0.101" desc "My PSTN GW Address"
#
# - by default is empty to avoid misrouting
pstn.gw_ip = "" desc "PSTN GW Address"
pstn.gw_port = "" desc "PSTN GW Port"
#!endif

#!ifdef WITH_VOICEMAIL
# VoiceMail Routing on offline, busy or no answer
#
# - by default Voicemail server IP is empty to avoid misrouting
voicemail.srv_ip = "" desc "VoiceMail IP Address"
voicemail.srv_port = "5060" desc "VoiceMail Port"
#!endif

####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules/"
#!else
mpath="/usr/lib64/kamailio/modules/"
#!endif

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

#!ifdef WITH_ODBC
loadmodule "db_unixodbc.so"
#!endif

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"
loadmodule "htable.so"
#loadmodule "topoh.so"

loadmodule "sqlops.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpproxy.so"
loadmodule "ipops.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "pike.so"
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

#!ifdef WITH_ASTERISK
loadmodule "uac.so"
#!endif
 
#!ifdef WITH_XHTTP
loadmodule "xhttp.so"
#!ifdef WITH_XCAPSRV
loadmodule "pua.so"
loadmodule "rls.so"
loadmodule "xcap_server.so"
#!endif
#!ifdef WITH_WEBSOCKET
loadmodule "msrp.so"
loadmodule "websocket.so"
loadmodule "sdpops.so"
#endif
#!endif

#!ifdef WITH_XHTTP_RPC
loadmodule "xhttp_rpc.so"
#!endif

#!ifdef WITH_XHTTP_PI
loadmodule "xhttp_pi.so"
#!endif

# ----------------- setting module-specific parameters ---------------


# ----- mi_fifo params -----
modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")


# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)


# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
#!ifdef WITH_ASTERISK
modparam("rr", "append_fromtag", 1)
#!else
modparam("rr", "append_fromtag", 0)
#!endif

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)
# max value for expires of registrations
modparam("registrar", "max_expires", 3600)
#!ifdef WITH_ASTERISK
/* set values to match defaults from asterisk */
modparam("registrar", "default_expires", 120)
#!endif
# set it to 1 to enable GRUU
modparam("registrar", "gruu_enabled", 0)


# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra", 
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif


# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif


# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "load_credentials", "")
 
#!ifdef WITH_ASTERISK
# subscriber table is actually a view in DBASTURL
modparam("auth_db", "use_domain", 1)
modparam("auth_db", "db_url", DBASTURL)
modparam("auth_db", "version_table", 0)
#!else
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "use_domain", MULTIDOMAIN)
#!endif

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif

#!endif


# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif


# ----- speeddial params -----
#!ifdef WITH_SPEEDDIAL
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif


# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
# register callback to match myself condition with domains list
modparam("domain", "register_myself", 1)
#!endif


#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)
modparam("presence", "db_update_period", 20)
#modparam("presence", "server_address", "sip:@127.0.0.1:5060")
# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
# presence_xml.force_active must be 1 until a proper XCAP update is 
# implemented in websocket client since standard authorization of presence
# subscriptions are done through XCAP updates
#modparam("presence_xml", "force_active", 0)
modparam("presence_xml", "force_active", 1)
modparam("presence_xml", "integrated_xcap_server", 1)
#!endif


#!ifdef WITH_NAT
# ----- rtpproxy params -----
#modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif


#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "//etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
#!endif

#!ifdef WITH_XHTTP
#!ifdef WITH_XCAPSRV
# ----- xcap_server params -----
modparam("xcap_server", "db_url", DBURL)
modparam("xcap_server", "buf_size", 32768)
modparam("pua", "db_url", DBURL)
modparam("rls", "db_url", DBURL)
modparam("rls", "integrated_xcap_server", 1)
modparam("rls", "to_presence_code", 1024)
modparam("rls", "server_address", "sip:rls@127.0.0.1:5060")
modparam("msrp", "cmap_size", 8)
#!endif
#!ifdef WITH_WEBSOCKET
modparam("websocket", "keepalive_mechanism", 2)
#!endif
#!endif

#!ifdef WITH_XHTTP_RPC
modparam("xhttp_rpc", "xhttp_rpc_root", "http_rpc")
#!endif

#!ifdef WITH_XHTTP_PI
modparam("xhttp_pi", "xhttp_pi_root", "http_pi")
modparam("xhttp_pi", "framework", "//etc/kamailio/pi_framework.xml")
#!endif

modparam("sqlops", "sqlcon", "elxpbx=>unixodbc:///elxpbx-connector")

#modparam("topoh", "mask_key", "_elastix_3_")

modparam("htable", "htable", "pending_subscribe=>size=8;autoexpire=10;")

#!ifdef WITH_ODBC
modparam("db_unixodbc", "use_escape_common", 1)
#!endif

####### Routing Logic ########

import_file "kamailio-mhomed-elastix.cfg"

# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
# - note: this is the same as route { ... }
request_route {
	# per request initial checks
	route(REQINIT);

	# NAT detection
	route(NATDETECT);

	# run rtpproxy resolution
	route(MHOMED_ELASTIX);

	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	t_check_trans();

	# authentication
	route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		route(MHOMED_RR);
	}

	# account only INVITEs
	if (is_method("INVITE"))
	{
		setflag(FLT_ACC); # do accounting
	}

	# dispatch requests to foreign domains
	route(SIPOUT);

	### requests for my local domains

	# handle presence related requests
	route(PRESENCE);

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null)
	{
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# dispatch destinations to PSTN
	route(PSTN);

	# user location service
	route(LOCATION);
}


route[RELAY] {

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood dection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself)
	{
		if($sht(ipban=>$si)!=$null)
		{
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req())
		{
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			route(DLGURI);
			if (is_method("BYE")) {
				setflag(FLT_ACC); # do accounting ...
				setflag(FLT_ACCFAILED); # ... even if the transaction fails
			}
			else if ( is_method("ACK") ) {
				# ACK is forwarded statelessy
				route(NATMANAGE);
			}
			else if ( is_method("NOTIFY") ) {
				# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
				route(MHOMED_RR);
				#xlog("L_ALERT", "===== request for NOTIFY, Call-ID header is $ci\n");
				if ($sht(pending_subscribe=>$ci)) {
					#xlog("L_ALERT", "===== request for NOTIFY($ci) dropped\n");
					exit;
				#} else {
					#xlog("L_ALERT", "===== request for NOTIFY($ci) accepted\n");
				}
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					route(RELAY);
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Value of $var(rr_advertise_address) is set in route(MHOMED_ELASTIX)
route[MHOMED_RR] {
	if ($var(rr_advertise_address) != 0) {
		record_route_advertised_address("$var(rr_advertise_address)");
	} else {
		record_route();
	}
}

# Handle SIP registrations
route[REGISTRAR] {
	if (is_method("REGISTER"))
	{
		if(isflagset(FLT_NATS))
		{
			setbflag(FLB_NATB);
			# uncomment next line to do SIP NAT pinging 
			## setbflag(FLB_NATSIPPING);
		}
		if (!save("location"))
			sl_reply_error();

#!ifdef WITH_ASTERISK
#		route(REGFWD);
		route(TOASTERISK);
#!endif

		exit;
	}
}

# USER location service
route[LOCATION] {

#!ifdef WITH_SPEEDDIAL
	# search for short dialing - 2-digit extension
	if($rU=~"^[0-9][0-9]$")
		if(sd_lookup("speed_dial"))
			route(SIPOUT);
#!endif

#!ifdef WITH_ALIASDB
	# search in DB-based aliases
	if(alias_db_lookup("dbaliases"))
		route(SIPOUT);
#!endif

#!ifdef WITH_ASTERISK
	if(is_method("INVITE") && (!route(FROMASTERISK)) && (!sdp_content() || !sdp_with_media("message"))) {
		# if new call from out there - send to Asterisk
		# - non-INVITE request are routed directly by Kamailio
		# - traffic from Asterisk is routed also directy by Kamailio
		route(TOASTERISK);
		exit;
	}
#!endif
 
	$avp(oexten) = $rU;
	#xlog("L_ALERT", "ALERT: received routing request for ru=$ru rU=$rU rd=$rd ou=$ou fu=$fu tu=$tu\n");
	uac_restore_from();
	uac_restore_to();
	if (!lookup("location")) {
		$var(rc) = $rc;
		route(TOVOICEMAIL);
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	# when routing via usrloc, log the missed calls also
	if (is_method("INVITE"))
	{
		setflag(FLT_ACCMISSED);
	}

	route(RELAY);
	exit;
}

# Presence server route
route[PRESENCE] {
#!ifdef WITH_XCAPSRV
	if(!is_method("PUBLISH|SUBSCRIBE|NOTIFY"))
#!else
	if(!is_method("PUBLISH|SUBSCRIBE"))
#!endif
		return;

#!ifdef WITH_ASTERISK
	if (!route(FROMASTERISK)) {
		if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
			route(TOASTERISK);
		}
	}
#!else
	if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
		route(TOVOICEMAIL);
		# returns here if no voicemail server is configured
		sl_send_reply("404", "No voicemail service");
		exit;
	}
#!endif

#!ifdef WITH_ASTERISK
	# if routing to asterisk, asterisk should handle dialog
	if (!route(FROMASTERISK)) {
		if(is_method("SUBSCRIBE") && $hdr(Event)=="dialog") {
			#xlog("L_ALERT", "===== request to SUBSCRIBE(dialog), Call-ID is $ci\n");
			$sht(pending_subscribe=>$ci) = 1;
			route(TOASTERISK);
		}
	}
#!endif

#!ifdef WITH_PRESENCE
	if (!t_newtran())
	{
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH"))
	{
		handle_publish();
		t_release();
	} else if(is_method("SUBSCRIBE")) {
		$var(ret_code) = rls_handle_subscribe();
		if ($var(ret_code) == 1024) 
			handle_subscribe();
		t_release();
	} else if (is_method("NOTIFY")) {
		rls_handle_notify();
		t_release();
	}
	exit;
#!endif
	
	# if presence enabled, this part will not be executed
	if (is_method("PUBLISH") || $rU==$null)
	{
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

# Authentication route
route[AUTH] {
#!ifdef WITH_AUTH

#!ifdef WITH_ASTERISK
	# do not auth traffic from Asterisk - trusted!
	if(route(FROMASTERISK))
		return;
#!endif

	$var(tempfU) = $fU;
#!ifdef WITH_IPAUTH
	if((!is_method("REGISTER")) && allow_source_address() && $au == "")
	{
        # Attempt to create a P-Asserted-Identity if none exists, to preserve
        # incoming Caller-ID
        if (!is_present_hf("P-Asserted-Identity"))
        {
            #append_hf("P-Asserted-Identity: <sip:$xavp(ra=>number)@$fd>\r\n");
            append_hf("P-Asserted-Identity: <sip:$fU@$fd>\r\n");
        }

        # Loading $fU from database using IP
        sql_pvquery("elxpbx", "SELECT name FROM sip WHERE host = '$si' AND sippasswd IS NULL", "$var(tempfU)");
        
		# source IP allowed
		return;
	}
#!endif

	if (is_method("REGISTER|INVITE") || from_uri==myself)
	{
		# authenticate requests
		#if (!auth_check("$fd", "subscriber", "1")) {
		if (!auth_check("$fd", "subscriber", "0")) {
			auth_challenge("$fd", "0");
			exit;
		}
		# user authenticated - remove auth header
		if(!is_method("REGISTER|PUBLISH"))
			consume_credentials();
	}
	# if caller is not local subscriber, then check if it calls
	# a local destination, otherwise deny, not an open relay here
	if (from_uri!=myself && uri!=myself)
	{
		sl_send_reply("403","Not relaying");
		exit;
	}

#!endif
	return;
}

# Caller NAT detection route
route[NATDETECT] {
#!ifdef WITH_NAT
	force_rport();
	#
	#  1 - Contact header field is searched for occurrence of RFC1918 or rfc6598 addresses.
	#  2 - the "received" test is used: address in Via is compared against source IP address of signaling
	# 16 - test if the source port is different from the port in Via
	# 64 - test if the source connection of signaling is a WebSocket 
	# -----
	# 83
#!ifdef WITH_WEBSOCKET
	# Do NAT traversal stuff for requests from a WebSocket
	# connection - even if it is not behind a NAT!
	# This won't be needed in the future if Kamailio and the
	# WebSocket client support Outbound and Path.
	if (nat_uac_test("83")) {
#!else
	if (nat_uac_test("19")) {
#!endif
		if (is_method("REGISTER|SUBSCRIBE")) {
			fix_nated_register();
#!ifdef WITH_WEBSOCKET
			if (nat_uac_test("64")) fix_nated_contact();
#!endif
		} else {
			if (is_first_hop())
				if (!add_contact_alias()) {
					xlog("L_ERR", "Error aliasing contact <$ct>\n");
					sl_send_reply("400", "Bad Request");
					exit;
				}
		}
		setflag(FLT_NATS);
	}
#!endif

	return;
}

# RTPProxy control
route[NATMANAGE] {
#!ifdef WITH_NAT
	if (is_request()) {
#		if(has_totag()) {
#			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
#			}
#		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) {
		return;
	}

	set_rtp_proxy_set("$var(rtpproxy_set)");
	rtpproxy_manage("co", $var(rtpproxy_if));

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			if(is_first_hop())
				set_contact_alias();
		}
	}
#!endif
	return;
}

# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		if (!handle_ruri_alias()) {
			xlog("L_ERR", "Bad alias <$ru>\n");
			sl_send_reply("400", "Bad Request");
			exit;
		}
	}
#!endif
	return;
}

# Routing to foreign domains
route[SIPOUT] {
	if (!uri==myself)
	{
		append_hf("P-hint: outbound\r\n");
		route(RELAY);
	}
}

# PSTN GW routing
route[PSTN] {
#!ifdef WITH_PSTN
	# check if PSTN GW IP is defined
	if (strempty($sel(cfg_get.pstn.gw_ip))) {
		xlog("SCRIPT: PSTN rotuing enabled but pstn.gw_ip not defined\n");
		return;
	}

	# route to PSTN dialed numbers starting with '+' or '00'
	#     (international format)
	# - update the condition to match your dialing rules for PSTN routing
	if(!($rU=~"^(\+|00)[1-9][0-9]{3,20}$"))
		return;

	# only local users allowed to call
	if(from_uri!=myself) {
		sl_send_reply("403", "Not Allowed");
		exit;
	}

	if (strempty($sel(cfg_get.pstn.gw_port))) {
		$ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip);
	} else {
		$ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip) + ":"
					+ $sel(cfg_get.pstn.gw_port);
	}

	route(RELAY);
	exit;
#!endif

	return;
}

# XMLRPC routing
#!ifdef WITH_XMLRPC
route[XMLRPC] {
	# allow XMLRPC from localhost
	if ((method=="POST" || method=="GET")
			&& (src_ip==127.0.0.1)) {
		# close connection only for xmlrpclib user agents (there is a bug in
		# xmlrpclib: it waits for EOF before interpreting the response).
		if ($hdr(User-Agent) =~ "xmlrpclib")
			set_reply_close();
		set_reply_no_connect();
		dispatch_rpc();
		exit;
	}
	send_reply("403", "Forbidden");
	exit;
}
#!endif

# route to voicemail server
route[TOVOICEMAIL] {
#!ifdef WITH_VOICEMAIL
	if(!is_method("INVITE|SUBSCRIBE"))
		return;

	# check if VoiceMail server IP is defined
	if (strempty($sel(cfg_get.voicemail.srv_ip))) {
		xlog("SCRIPT: VoiceMail rotuing enabled but IP not defined\n");
		return;
	}
	if(is_method("INVITE")) {
		if($avp(oexten)==$null)
			return;
		$ru = "sip:" + $avp(oexten) + "@" + $sel(cfg_get.voicemail.srv_ip)
				+ ":" + $sel(cfg_get.voicemail.srv_port);
	} else {
		if($rU==$null)
			return;
		$ru = "sip:" + $rU + "@" + $sel(cfg_get.voicemail.srv_ip)
				+ ":" + $sel(cfg_get.voicemail.srv_port);
	}
	route(RELAY);
	exit;
#!endif

	return;
}

# manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

# manage incoming replies
onreply_route[MANAGE_REPLY] {
	# run rtpproxy resolution
	route(MHOMED_ELASTIX);

	xdbg("incoming reply\n");

	if (is_method("SUBSCRIBE") && route(FROMASTERISK)) {
		#xlog("L_ALERT", "===== reply to SUBSCRIBE, coming from asterisk, Call-ID is $ci\n");
		$sht(pending_subscribe=>$ci) = 0;

		if (is_present_hf("Contact")) {
			#xlog("L_ALERT", "===== reply to SUBSCRIBE has Contact: $ct\n");
			#xlog("L_ALERT", "===== want to replace with $td\n");
			#xlog("L_ALERT", "===== regexp to use is /ASTERISKIP:ASTERISKPORT/$td/\n");
			if (subst_hf("Contact", "/ASTERISKIP:ASTERISKPORT/$td/", "a")) {
				msg_apply_changes();
				#xlog("L_ALERT", "===== reply had Contact modified\n");
			}
		}
	}

	if(status=~"[12][0-9][0-9]")
		route(NATMANAGE);

	# manage websocket reply
	if (nat_uac_test(64)) {
		# Do NAT traversal stuff for replies to a WebSocket connection
		# - even if it is not behind a NAT!
		# This won't be needed in the future if Kamailio and the
		# WebSocket client support Outbound and Path.
		add_contact_alias();
	}
}

# manage failure routing cases
failure_route[MANAGE_FAILURE] {
	# run rtpproxy resolution
	route(MHOMED_ELASTIX);

	route(NATMANAGE);

	if (t_is_canceled()) {
		exit;
	}

#!ifdef WITH_BLOCK3XX
	# block call redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		t_reply("404","Not found");
		exit;
	}
#!endif

#!ifdef WITH_VOICEMAIL
	# serial forking
	# - route to voicemail on busy or no answer (timeout)
	if (t_check_status("486|408")) {
		$du = $null;
		route(TOVOICEMAIL);
		exit;
	}
#!endif
}

#!ifdef WITH_XHTTP
event_route[xhttp:request] {
#!ifdef WITH_XHTTP_RPC
       $var(xhttp_rpc_root) = $(hu{s.substr,0,9});
       if ($var(xhttp_rpc_root) == "/http_rpc") {
               dispatch_xhttp_rpc();
       }
#!endif
#!ifdef WITH_XHTTP_PI
       $var(xhttp_rpc_root) = $(hu{s.substr,0,8});
       if ($var(xhttp_rpc_root) == "/http_pi") {
               dispatch_xhttp_pi();
       }
#!endif
#!ifdef WITH_XCAPSRV
	if ($hu =~ "^/xcap-root/") {
		route(XCAPSRV);
	}
#!endif

        set_reply_close();
        set_reply_no_connect();

#        if ($Rp != 80
##!ifdef WITH_TLS
#            && $Rp != 443
##!endif
#        ) {
#
#                xlog("L_WARN", "HTTP request received on $Rp\n");
#                xhttp_reply("403", "Forbidden", "text/html", "Forbidden");
#                exit;
#        }

        xlog("L_DBG", "HTTP Request Received\n");

        if ($hdr(Upgrade)=~"websocket"
                        && $hdr(Connection)=~"Upgrade"
                        && $rm=~"GET") {

                # Validate Host - make sure the client is using the correct
                # alias for WebSockets
                if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
                        xlog("L_WARN", "Bad host $hdr(Host)\n");
                        xhttp_reply("403", "Forbidden", "", "");
                        exit;
                }

                # Optional... validate Origin - make sure the client is from an
                # authorised website.  For example,
                #
                # if ($hdr(Origin) != "http://communicator.MY_DOMAIN"
                #     && $hdr(Origin) != "https://communicator.MY_DOMAIN") {
                #       xlog("L_WARN", "Unauthorised client $hdr(Origin)\n");
                #       xhttp_reply("403", "Forbidden", "", "");
                #       exit;
                # }

                # Optional... perform HTTP authentication

                # ws_handle_handshake() exits (no further configuration file
                # processing of the request) when complete.
                if (ws_handle_handshake())
		{
			# Optional... cache some information about the
			# successful connection
			exit;
		}
        }



       xhttp_reply("200", "OK", "text/html",
               "<html><body>Wrong URL $hu</body></html>");
}
#!endif

#!ifdef WITH_XCAPSRV
route[XCAPSRV] {
	# Remove port specification from Host header and use as authentication domain
	$var(http_domain) = $(hdr(Host){s.select,0,:});
	if (!www_authorize("$var(http_domain)", "subscriber")) {
		www_challenge("$var(http_domain)", "0");
		exit;
	}

#	xlog("L_ALERT", "===== xhttp: request [$rv] $rm => $hu\n");

	set_reply_close();
	set_reply_no_connect();

	# Jitsi...
	if ($hu=~"^/xcap-root/resource-lists/users/.*/index$")
		$var(doc_uri) = $(hu{re.subst,/(^\/xcap-root\/resource-lists\/users\/.*\/).*$/\1generallist.xml/});
	else if ($hu=~"^/xcap-root/pres-rules/users/.*/presrules$")
		$var(doc_uri) = $(hu{re.subst,/(^\/xcap-root\/)pres-rules(\/users\/.*\/)presrules/\1org.openmobilealliance.pres-rules\2pres-rules/});
	else if ($hu=~"^/xcap-root/oma_status-icon/users/.*/.*$")
		$var(doc_uri) = $(hu{re.subst,/(^\/xcap-root\/)oma_status-icon(\/users\/.*\/).*$/\1org.openmobilealliance.pres-content\2oma_status-icon\/index/});
	# Bria...
	else if ($hu=~"^/xcap-root/resource-lists/users/.*/contacts-resource-list.xml$")
		$var(doc_uri) = $(hu{re.subst,/(^\/xcap-root\/resource-lists\/users\/.*\/).*$/\1generallist.xml/});
	else if ($hu=~"^/xcap-root/resource-lists/users/.*/resource-list.xml$")
		$var(doc_uri) = $(hu{re.subst,/(^\/xcap-root\/resource-lists\/users\/.*\/).*$/\1generallist.xml/});
	else
		$var(doc_uri) = $hu;
#	xlog("L_ALERT", "===== xhttp: request will serve [$rv] $rm => $var(doc_uri)\n");

	# xcap ops
	$xcapuri(u=>data) = $var(doc_uri);
	if($xcapuri(u=>xuid)=~"^sip:.+@.+")
		$var(uri) = $xcapuri(u=>xuid);
	else if($xcapuri(u=>xuid)=~".+@.+")
		$var(uri) = "sip:" + $xcapuri(u=>xuid);
	else
		$var(uri) = "sip:"+ $xcapuri(u=>xuid) + "@" + $Ri;
#	xlog("L_ALERT", "===== xhttp: $xcapuri(u=>auid) : $xcapuri(u=>xuid)\n");

	if ($xcapuri(u=>auid) == "xcap-caps") {
		if ($rm == "GET") {
			$var(xbody) =
"<?xml version='1.0' encoding='UTF-8'?>
<xcap-caps xmlns='urn:ietf:params:xml:ns:xcap-caps'>
  <auids>
    <!-- <auid>org.openxcap.watchers</auid> -->
    <auid>rls-services</auid>
    <auid>resource-lists</auid>
    <auid>xcap-caps</auid>
    <!-- <auid>org.openxcap.dialog-rules</auid> -->
    <auid>org.openmobilealliance.pres-content</auid>
    <!-- <auid>org.openxcap.purge</auid> -->
    <auid>pres-rules</auid>
    <auid>org.openmobilealliance.pres-rules</auid>
    <auid>pidf-manipulation</auid>
    <auid>org.openmobilealliance.xcap-directory</auid>

    <auid>org.openmobilealliance.user-profile</auid>
    <auid>org.openmobilealliance.search</auid>
  </auids>
  <extensions></extensions>
  <namespaces>
    <!-- <namespace>http://openxcap.org/ns/watchers</namespace> -->
    <namespace>urn:ietf:params:xml:ns:rls-services</namespace>
    <namespace>urn:ietf:params:xml:ns:resource-lists</namespace>
    <namespace>urn:ietf:params:xml:ns:xcap-caps</namespace>
    <!-- <namespace>http://openxcap.org/ns/dialog-rules</namespace> -->
    <namespace>urn:oma:xml:prs:pres-content</namespace>
    <!-- <namespace>http://openxcap.org/ns/purge</namespace> -->
    <namespace>urn:ietf:params:xml:ns:pres-rules</namespace>
    <namespace>urn:ietf:params:xml:ns:pidf</namespace>
    <namespace>urn:oma:xml:xdm:xcap-directory</namespace>
 
    <namespace>urn:oma:xml:xdm:user-profile</namespace>
    <namespace>urn:oma:xml:xdm:search</namespace>
  </namespaces>
</xcap-caps>";

			xhttp_reply("200", "OK", "application/xcap-caps+xml", "$var(xbody)");
		} else {
			append_to_reply("Allow: GET\r\n");
			xhttp_reply("405", "Method Not Allowed", "", "");
		}
		exit;
	}

	# be sure auth user access only its documents
	if ($au != $(var(uri){uri.user})) {
		xhttp_reply("403", "Forbidden", "text/html", "<html><body>$si:$sp</body></html>");
		exit;
	}

	switch($rm) {
	case "PUT":
		xcaps_put("$var(uri)", "$var(doc_uri)", "$rb");
		if ($xcapuri(u=>auid) =~ "pres-rules") {
			pres_update_watchers("$var(uri)", "presence");
			pres_refresh_watchers("$var(uri)", "presence", 1);
		} else if ($xcapuri(u=>auid) =~ "rls-services" || $xcapuri(u=>auid) =~ "resource-lists") {
			rls_update_subs("$var(uri)", "presence");
		} else if ($xcapuri(u=>auid) =~ "pidf-manipulation") {
			pres_refresh_watchers("$var(uri)", "presence", 2, "$xcapuri(u=>uri_adoc)", "$xcapuri(u=>file)");
		}
		exit;
		break;
	case "GET":
		xcaps_get("$var(uri)", "$var(doc_uri)");
		exit;
		break;
	case "DELETE":
		xcaps_del("$var(uri)", "$var(doc_uri)");
		if ($xcapuri(u=>auid) =~ "pres-rules") {
			pres_update_watchers("$var(uri)", "presence");
			pres_refresh_watchers("$var(uri)", "presence", 1);
		} else if ($xcapuri(u=>auid) =~ "rls-services" || $xcapuri(u=>auid) =~ "resource-lists") {
			rls_update_subs("$var(uri)", "presence");
		} else if ($xcapuri(u=>auid) =~ "pidf-manipulation") {
			pres_refresh_watchers("$var(uri)", "presence", 2, "$xcapuri(u=>uri_adoc)", "$xcapuri(u=>file)");
		}
		exit;
		break;
	case "POST":
		if ($xcapuri(u=>auid) =~ "search") {
			xhttp_reply("501", "Not Implemented", "", "");
		} else {
			if ($xcapuri(u=>auid) =~ "xcap-directory") {
				append_to_reply("Allow: GET\r\n");
			} else {
				append_to_reply("Allow: DELETE, GET, PUT\r\n");
			}
			xhttp_reply("405", "Method Not Allowed", "", "");
		}
		exit;
		break;
	}

	# other http requests
	xhttp_reply("404", "Not Found", "", "");
	exit;
}
#!endif

#!ifdef WITH_ASTERISK
# Test if coming from Asterisk
route[FROMASTERISK] {
	if($si==$sel(cfg_get.asterisk.bindip)
			&& $sp==$sel(cfg_get.asterisk.bindport))
		return 1;
	return -1;
}
 
# Send to Asterisk
route[TOASTERISK] {
	$var(rip) = $sel(cfg_get.asterisk.bindip);
	$du = "sip:" + $sel(cfg_get.asterisk.bindip) + ":"
			+ $sel(cfg_get.asterisk.bindport);

	# If authorization user is identical to From: username, I will assume this is
	# a call coming from an extension within a domain. Otherwise, this request
	# will be unchanged, for incoming SIP trunks.
	if ($au == $fU || $ad != "") {
		# Further check - test whether unmagled name is a global trunk
		$var(istrunk) = 0;
		sql_pvquery("elxpbx", "SELECT COUNT(name) FROM sip WHERE name = '$au'", "$var(istrunk)");
		if ($var(istrunk) != 0) {
			$var(istrunk) = 1;
		} else {
			$var(realfd) = $fd;
			if ($ad != "") {
				$var(realfd) = $ad;
			}

			# Encode domain part into username
			$var(newfrom) = $au + "_" + $var(realfd);
			$var(newfromuri) = "sip:" + $(var(newfrom){s.escape.user}) + "@" + $sel(cfg_get.asterisk.bindip) + ":" + $sel(cfg_get.asterisk.bindport);
			if ($ad != "" && $fU == $tU && $fd == $td) {
				$var(newto) = $var(newfrom);
			} else {
				$var(newto) = $tU + "_" + $td;
			}
			$var(newtouri) = "sip:" + $(var(newto){s.escape.user}) + "@" + $sel(cfg_get.asterisk.bindip) + ":" + $sel(cfg_get.asterisk.bindport);

			uac_replace_from("$var(newfromuri)");
			if (!( is_method("SUBSCRIBE") && $hdr(Event)=="dialog" )) {
				# asterisk uses To header to build entity attribute in NOTIFY(dialog)
				# and mangling breaks some phones
				uac_replace_to("$var(newtouri)");
			}

			consume_credentials();
		}
	} else {
		if ($au != "") {
			$var(newfromuri) = "sip:" + $au + "@" + $fd;
			uac_replace_from("$var(newfromuri)");
		} else {
			if ($au != $var(tempfU)) {
				$var(newfromuri) = "sip:" + $var(tempfU) + "@" + $fd;
				uac_replace_from("$var(newfromuri)");
			}
		}
	}
	route(RELAY);
	exit;
}

event_route[msrp:frame-in] {
	xlog("L_ALERT","============#[[$msrp(method)]]===========\n");
	xlog("L_ALERT","============*[[$si:$sp]]\n");
	xlog("L_ALERT","============ crthop:   [$msrp(crthop)]\n");
	xlog("L_ALERT","============ prevhop:  [$msrp(prevhop)]\n");
	xlog("L_ALERT","============ nexthop:  [$msrp(nexthop)]\n");
	xlog("L_ALERT","============ firsthop: [$msrp(firsthop)]\n");
	xlog("L_ALERT","============ lasthop:  [$msrp(lasthop)]\n");
	xlog("L_ALERT","============ prevhops: [$msrp(prevhops)]\n");
	xlog("L_ALERT","============ nexthops: [$msrp(nexthops)]\n");
	xlog("L_ALERT","============ srcaddr:  [$msrp(srcaddr)]\n");
	xlog("L_ALERT","============ srcsock:  [$msrp(srcsock)]\n");
	xlog("L_ALERT","============ sessid:   [$msrp(sessid)]\n");
	xlog("L_ALERT","============ From-Path:[$hdr(From-Path)]\n");
	xlog("L_ALERT","============ To-Path:  [$hdr(To-Path)]\n");
	xlog("L_ALERT","============ ad:       [$ad]\n");

	msrp_reply_flags("1");
	
	if (msrp_is_reply()) {
		msrp_relay();
	} else if($msrp(method)=="AUTH") {
		if ($msrp(nexthops)>0) {
			msrp_relay();
			exit;
		}

# Kamailio 4.1.4 is currently unable to build a RFC-compliant MSRP challenge or 
# check a RFC-compliant authentication response. Skipping authentication altogether
# is also not RFC-compliant, but at least some progress is made.
#
#		$var(msrprealm) = $(hdr(To-Path){msrpuri.host});
#		xlog("L_ALERT","============ msrprealm:       [$var(msrprealm)]\n");
#		if (!www_authenticate("$var(msrprealm)", "subscriber", "$msrp(method)")) {
#			if(auth_get_www_authenticate("$var(msrprealm)", "1", "$var(wauth)")) {
#				$var(s1) = "qop=\"auth\"";
#				$var(s2) = "qop=\"auth\", opaque=\"0123456789abcdef\"";
#				$var(wauth) = $(var(wauth){s.replace,$var(s1),$var(s2)});
#				msrp_reply("401", "Unauthorized", "$var(wauth)");
#			} else {
#				msrp_reply("500", "Server Error");
#			}
#			exit;
#		}

		msrp_cmap_save();
	} else if ($msrp(method)=="SEND" || $msrp(method)=="REPORT") {
		if ($msrp(nexthops)>1) {
			if ($msrp(method)!="REPORT") {
				msrp_reply("200", "OK");
			}
			msrp_relay();
			exit;
		}

		if (msrp_cmap_lookup()) {
			if ($msrp(method)!="REPORT") {
				msrp_reply("200", "OK");
			}
			msrp_relay_flags("1");
			msrp_relay();
		} else {
			msrp_reply("481", "Session-does-not-exist");
		}
	}
	else
	{
		msrp_reply("501", "Request-method-not-understood");
	}
}

# Forward REGISTER to Asterisk
#route[REGFWD] {
#	if(!is_method("REGISTER"))
#	{
#		return;
#	}
#	$var(rip) = $sel(cfg_get.asterisk.bindip);
#	$uac_req(method)="REGISTER";
#	$uac_req(ruri)="sip:" + $var(rip) + ":" + $sel(cfg_get.asterisk.bindport);
#
#	# Encode domain part into username
#        $var(newfrom) = $fU + "_" + $fd;
#        $var(newfromuri) = "sip:" + $(var(newfrom){s.escape.user}) + "@" + $sel(cfg_get.asterisk.bindip) + ":" + $sel(cfg_get.asterisk.bindport);
#        uac_replace_from("$var(newfromuri)");
#        $var(newto) = $tU + "_" + $td;
#        $var(newtouri) = "sip:" + $(var(newto){s.escape.user}) + "@" + $sel(cfg_get.asterisk.bindip) + ":" + $sel(cfg_get.asterisk.bindport);
#        uac_replace_to("$var(newtouri)");
#
#	$var(encodeuser) = $au + "_" + $fd;
#	$uac_req(furi)=$var(newfromuri);
#
#	$uac_req(turi)=$var(newtouri);
#
#	$var(encodeuser) = $au + "_" + $fd;
#	$uac_req(hdrs)="Contact: <sip:" + $(var(encodeuser){s.escape.user}) + "@"
#				+ $sel(cfg_get.kamailio.bindip)
#				+ ":" + $sel(cfg_get.kamailio.bindport) + ">\r\n";
#	if($sel(contact.expires) != $null)
#		$uac_req(hdrs)= $uac_req(hdrs) + "Expires: " + $sel(contact.expires) + "\r\n";
#	else
#		$uac_req(hdrs)= $uac_req(hdrs) + "Expires: " + $hdr(Expires) + "\r\n";
#	uac_req_send();
#}
#!endif
